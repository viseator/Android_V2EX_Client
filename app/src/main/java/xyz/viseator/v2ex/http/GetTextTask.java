package xyz.viseator.v2ex.http;import android.content.Context;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.graphics.Matrix;import android.graphics.drawable.BitmapDrawable;import android.graphics.drawable.Drawable;import android.os.AsyncTask;import android.text.Html;import android.util.Log;import android.widget.TextView;import java.io.IOException;import java.io.InputStream;import java.net.HttpURLConnection;import java.net.URL;import javax.net.ssl.HttpsURLConnection;/** * Created by viseator on 2016/12/3. */public class GetTextTask extends AsyncTask<String, Void, CharSequence> {    private Context context;    private TextView textView;    private final static String TAG = "wudi GetTextTask";    public GetTextTask(Context context, TextView textView) {        this.context = context;        this.textView = textView;    }    @Override    protected CharSequence doInBackground(String... strings) {        CharSequence text;        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.N) {            text = Html.fromHtml(strings[0], Html.FROM_HTML_MODE_COMPACT, new Html.ImageGetter() {                @Override                public Drawable getDrawable(String s) {                    return mGetDrawable(s);                }            }, null);        } else {            text = Html.fromHtml(strings[0], new Html.ImageGetter() {                @Override                public Drawable getDrawable(String s) {                    return mGetDrawable(s);                }            }, null);        }        return text;    }    @Override    protected void onPostExecute(CharSequence charSequence) {        textView.setText(charSequence);    }    private Drawable mGetDrawable(String s) {        URL url;        InputStream inputStream;        Bitmap bitmap = null;        try {            url = new URL(s);            if (s.charAt(4) != 's') {                HttpURLConnection httpURLConnection = (HttpURLConnection) url.openConnection();                inputStream = httpURLConnection.getInputStream();            } else {                HttpsURLConnection httpsURLConnection = (HttpsURLConnection) url.openConnection();                inputStream = httpsURLConnection.getInputStream();            }            bitmap = BitmapFactory.decodeStream(inputStream);            inputStream.close();        } catch (IOException e) {            e.printStackTrace();        }        float scaleSize = ((float) context.getResources().getDisplayMetrics().widthPixels) /                (bitmap != null ? bitmap.getWidth() : 0);        if (scaleSize < 1) {            Matrix matrix = new Matrix();            matrix.postScale(scaleSize, scaleSize);            bitmap = Bitmap.createBitmap(bitmap, 0, 0, bitmap != null ? bitmap.getWidth() : 0,                    bitmap != null ? bitmap.getHeight() : 0, matrix, true);        }        Drawable drawable = new BitmapDrawable(context.getResources(), bitmap);        drawable.setBounds(0, 0, drawable.getIntrinsicWidth(), drawable.getIntrinsicHeight());        Log.d(TAG, s);        return drawable;    }}